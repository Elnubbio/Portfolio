@page "/musicquiz"
@inject HttpClient httpClient;

@using System.Text.RegularExpressions
@using PortfolioWebAssem.Models;

<PageTitle>Music Quiz</PageTitle>

<NavLink class="nav-link" href="/">
	Home
</NavLink>
@* Console.WriteLine(fetchArtistId("linkin-park")); *@
@* <button @onclick="goToStart">Go to Start</button>
<button @onclick="goToQuiz">Go to Quiz</button> *@

<button @onclick="goToStart">Reset</button>

@if (state == eMusicState.Over)
{
	<MusicQuizPage_QuizOver Score="@score"/>
}
else if (state == eMusicState.Quiz)
{
	<MusicQuizPage_Quiz SongDetailsList=@SongDetailsList GoToQuizOver="goToQuizOver" />
}
else if (state == eMusicState.Start)
{
	<MusicQuizPage_MusicStart startQuizButtonVisibility=@startQuizButtonVisibility StartQuiz="goToQuiz" />
	<ArtistList setSongs="setSongs"/>
	
}




@code{
	eMusicState state = eMusicState.Start;
	int score = 0;
	public enum eMusicState
	{
		Start,
		Quiz,
		Over
	}

	private void goToStart()
	{
		state = eMusicState.Start;
		//reset
		SongDetailsList.Clear();
		startQuizButtonVisibility = "hidden";
	}

	private void goToQuiz()
	{
		state = eMusicState.Quiz;
	}

	private async Task goToQuizOver(int finalScore)
	{
		score = finalScore;
		state = eMusicState.Over;
	}

	//TESTING SONG - replace artist with user selection + song with random song from geniusAPI fetched list
	// string currentArtist = "linkin-park";
	// string currentSong = "breaking-the-habit";

	// List<string> LyricsFromFetch = new();
	// protected override async Task OnInitializedAsync()
	// {	
	// 	LyricsFromFetch = await fetchLyricsAsync(currentArtist, currentSong);
	// }





	// private async Task<List<string>> fetchLyricsAsync(string artistName, string songName) {
	// 	//LYRICS API FETCH - gives the lyrics for a given artist and song
	// 	//Maybe change this out for the genius api? but then have to rewrite getLyricSnippet
	// 	//possible problem with mismatch between geniusAPI song name and this lyric's api song name
	// 	var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://api.lyrics.ovh/v1/{artistName}/{songName}");
	// 	var response = await httpClient.SendAsync(httpRequestMessage);
	// 	return await getLyricSnippet(await response.Content.ReadAsStringAsync());
	// }


	string startQuizButtonVisibility = "hidden";
	List<SongDetails> SongDetailsList = new();
	private async Task setSongs(List<SongDetails> songDetailsList)
	{
		SongDetailsList = songDetailsList;
		if (SongDetailsList.Count() >= 10)
		{
			startQuizButtonVisibility = "visible";
		}

		foreach(SongDetails songInfo in songDetailsList)
		{
			foreach(string word in songInfo.Lyrics)
			{
				Console.Write(word + " ");
			}
			Console.WriteLine(" ");
		}
	}
}