@page "/"
@inject HttpClient httpClient;

@using System.Text.RegularExpressions
@using PortfolioWebAssem.Models;

<PageTitle>Music Quiz</PageTitle>
<button @onclick='() => fetchArtistIds("linkin-park")'>HELLO</button>
<ArtistList MyArtistList=@artistList />

@* Console.WriteLine(fetchArtistId("linkin-park")); *@
@* <button @onclick="goToStart">Go to Start</button>
<button @onclick="goToQuiz">Go to Quiz</button> *@


@if (state == eMusicState.Over)
{
	<MusicQuizPage_QuizOver />
}
else if (state == eMusicState.Quiz)
{
	<MusicQuizPage_Quiz AllLyrics=@LyricsFromFetch CurrentSong=@currentSong />
}
else if (state == eMusicState.Start)
{
	<MusicQuizPage_MusicStart StartQuiz="goToQuiz"/>
	
}




@code{
	eMusicState state = eMusicState.Start;

	public enum eMusicState
	{
		Start,
		Quiz,
		Over,
		ChooseArtist
	}

	private void goToStart()
	{
		state = eMusicState.Start;
	}

	private void goToQuiz()
	{
		state = eMusicState.Quiz;
	}

	string currentArtist = "linkin-park";
	string currentSong = "breaking-the-habit";

	List<string> LyricsFromFetch = new();
	protected override async Task OnInitializedAsync()
	{	
		LyricsFromFetch = await fetchLyricsAsync(currentArtist, currentSong);

		Console.WriteLine(LyricsFromFetch);
	}



	List<Artist> artistList = new();
	private async Task<ArtistResponse> fetchArtistIds(string artistName)
	{
		var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, $"http://musicbrainz.org/ws/2/artist/?query={artistName}&fmt=json");
		var response = await httpClient.SendAsync(httpRequestMessage);
		var returnObject = await response.Content.ReadFromJsonAsync<ArtistResponse>();

		foreach (Artist a in returnObject.Artists)
		{
			artistList.Add(a);
		};

		return returnObject;

	}

	

	private async Task<List<string>> fetchLyricsAsync(string artistName, string songName){
		var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://api.lyrics.ovh/v1/{artistName}/{songName}");
		var response = await httpClient.SendAsync(httpRequestMessage);


		return getLyricSnippet(await response.Content.ReadAsStringAsync());
	}

	private List<string> getLyricSnippet(string response){
		int wordCount = 10;
		string pattern = "\"lyrics\".*?\\n|\\[[^\\]]*\\]";
		Regex regex = new Regex(pattern);
		string result = regex.Replace(response, "");

		//remove start
		int returnIndex = result.IndexOf("\\r") + 2;
		string stringWithoutStart = result.Substring(returnIndex);
		//remove end
		string stringWithoutEnd = stringWithoutStart.Substring(0, stringWithoutStart.Length - 2);
		//split strings to list
		List<string> lyricLinesWithNewLines = stringWithoutEnd.Split("\\n").ToList();
		List<string> songLyrics = lyricLinesWithNewLines.Where((s) => s.Length > 1).ToList();

		int maxStartingIndex = getMaxStartingIndex(songLyrics, wordCount);
		Random rand = new Random();
		int startingIndex = rand.Next(0, maxStartingIndex);

		List<string> finalLyricLine = new();

		int currentWordCount = 0;
		for (int i = startingIndex; i < songLyrics.Count; i++)
		{
			string sentence = songLyrics[i];
			List<string> sentenceWords = sentence.Split(" ").ToList();
			foreach (string word in sentenceWords)
			{
				finalLyricLine.Add(word);
				currentWordCount++;
				if (currentWordCount >= wordCount)
				{
					Console.WriteLine(finalLyricLine);
					return finalLyricLine;
				}
			}
		}
		return new List<string>();
	}

	private int getMaxStartingIndex(List<string> songLyrics, int maxWordCount){

		//reverse list
		songLyrics.Reverse();

		//count words
		int currentWordCount = 0;
		int loopCounter = 0;
		foreach (string sentence in songLyrics)
		{
			int numOfWords = sentence.Split(" ").Count();
			currentWordCount += numOfWords;
			if (currentWordCount > maxWordCount)
			{
				songLyrics.Reverse();
				return songLyrics.Count - loopCounter - 1;
			}
			loopCounter++;
		}
		return -1;
	}
}