@page "/"
@inject HttpClient httpClient;

@using System.Text.RegularExpressions
@using PortfolioWebAssem.Models;

<PageTitle>Music Quiz</PageTitle>

@* Console.WriteLine(fetchArtistId("linkin-park")); *@
@* <button @onclick="goToStart">Go to Start</button>
<button @onclick="goToQuiz">Go to Quiz</button> *@


@if (state == eMusicState.Over)
{
	<MusicQuizPage_QuizOver />
}
else if (state == eMusicState.Quiz)
{
	<MusicQuizPage_Quiz AllLyrics=@lyricsList />
}
else if (state == eMusicState.Start)
{
	<MusicQuizPage_MusicStart StartQuiz="goToQuiz"/>
	<ArtistList MyArtistList=@artistList fetchArtistIds="fetchArtistIds" setLyrics="setLyrics"/>
	
}




@code{
	eMusicState state = eMusicState.Start;

	public enum eMusicState
	{
		Start,
		Quiz,
		Over,
		ChooseArtist
	}

	private void goToStart()
	{
		state = eMusicState.Start;
	}

	private void goToQuiz()
	{
		state = eMusicState.Quiz;
	}

	//TESTING SONG - replace artist with user selection + song with random song from geniusAPI fetched list
	// string currentArtist = "linkin-park";
	// string currentSong = "breaking-the-habit";

	// List<string> LyricsFromFetch = new();
	// protected override async Task OnInitializedAsync()
	// {	
	// 	LyricsFromFetch = await fetchLyricsAsync(currentArtist, currentSong);
	// }

	List<Artist> artistList = new();
	private async Task<ArtistResponse> fetchArtistIds(string artistName)
	{
		//MUSICBRAINZ FETCH - gives a list of 10 possible artists that match the given artistName
		var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, $"http://musicbrainz.org/ws/2/artist/?query={artistName}&fmt=json");
		var response = await httpClient.SendAsync(httpRequestMessage);
		var returnObject = await response.Content.ReadFromJsonAsync<ArtistResponse>();

		artistList = returnObject.Artists.Take(10).ToList();
		// artistList.DistinctBy((a) => a.Name);
		return returnObject;
	}



	// private async Task<List<string>> fetchLyricsAsync(string artistName, string songName) {
	// 	//LYRICS API FETCH - gives the lyrics for a given artist and song
	// 	//Maybe change this out for the genius api? but then have to rewrite getLyricSnippet
	// 	//possible problem with mismatch between geniusAPI song name and this lyric's api song name
	// 	var httpRequestMessage = new HttpRequestMessage(HttpMethod.Get, $"https://api.lyrics.ovh/v1/{artistName}/{songName}");
	// 	var response = await httpClient.SendAsync(httpRequestMessage);
	// 	return await getLyricSnippet(await response.Content.ReadAsStringAsync());
	// }

	List<List<string>> lyricsList = new();


	private async Task setLyrics(List<List<string>> lyrics)
	{
		lyricsList = lyrics;
		foreach(List<string> lyric in lyricsList)
		{
			foreach(string word in lyric)
			{
				Console.Write(word);
			}
			Console.WriteLine(" ");
		}
	}

}